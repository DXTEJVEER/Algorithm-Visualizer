{"version":3,"sources":["project_source/LoadingTestComponent.js","project_source/algorithms/Dijkstra.js","project_source/algorithms/Astar.js","project_source/pathfindingVisualizer/Node/Node.jsx","project_source/pathfindingVisualizer/Grid.jsx","project_source/SelectScreen.js","project_source/pathfindingVisualizer/PathfindingVisualizer.jsx","project_source/sortingvisualizer/SortingAlgorithms.js","project_source/sortingvisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["LoadingTestComponent","id","Component","Dijkstra","agrid","startnode","endnode","distance","visitedOrderedNodes","unvisitedNodes","grid","longList","row","cell","push","getAllNodes","length","SortNodes","closestNode","shift","isWall","Infinity","isVisited","UpdateUnvisitedNeighbours","sort","one","other","node","unvisitedNeighbours","neighbours","column","filter","getUnvisitedNeighbours","neighbour","previousNode","Astar","visitedList","openlist","closedlist","currentNode","lowestFcostNode","splice","indexOf","neighbourlist","getNeighboursOfCurrentNode","newDistance","gCost","getDistance","hCost","fCost","nodeA","nodeB","Math","abs","lowest","i","Node","props","state","extraClassName","this","isStart","isEnd","className","onMouseDown","onMouseDown1","onMouseEnter","onMouseEnter1","onMouseUp","onMouseUp1","onMouseLeave","onMouseLeave1","onDragStart","e","preventDefault","PureComponent","Grid","list2","grid1","map","key","snr","snc","enr","enc","pathFindingOpener","document","getElementById","textContent","setTimeout","style","display","sortingOpener","SelectScreen","onClick","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","mousepressed","lastKnownPosition","switchToSorter","PathfindingVisualizer","handleMouseDown","bind","handleMouseEnter","handleMouseUp","handleMouseLeave","componentDidMount","enableHalfHeader","enableFullHeader","generateRandomWalls","incSpeed","decSpeed","mouseIsPressed","draggingStart","draggingEnd","speed","isDoneVisualizing","col","setState","handleMouseLeaveAction","wallGrid","thisGrid","temporaryGrid","slice","j","nodeClass","newnode","explicitWallGrid","list","isFinish","getInitialGrid","disabled","color","pointerEvents","pLen","innerHTML","delay","disableHeader","endingnode","visitedNodesInOrder","shortestPath","shortpath","current_node","unshift","getShortestPath","current","terminalStartNode","terminalEndNode","visitedNodesOrder","shortest_Path","short_path","currentnode","tracePath","min","max","floor","random","boxSpeed","resetFullBoard","visualizeDijkstra","visualizeAstar","mergesort","array","steps","auxArray","mergeSortHelper","mainArray","start","end","mid","m","merge","quicksort","sortSteps","quickSortHelper","pivot","pivotValue","temp","partition","minimum","anArray","minIndex","step","switchToPathfinder","SortingVisualizer","getrandomvariable","arraySizeChange","animationSpeedChange","restoreButtonFunctionality","baseArray","bars","status","resetBaseArray","newarray","backgroundColor","window","clearTimeout","resetter","elements","getElementsByClassName","disablebuttons","barray","SortingAlgorithms","bar","first","second","firstStyle","secondStyle","idx","ht","height","quicksteps","ida","idb","idaStyle","idbStyle","bubblesteps","marker","insertionsteps","selectionsteps","ind","temporaory","newHeight","newNumberOfBars","value","newAnimationSpeed","type","name","defaultValue","onChange","sortViaMergesort","sortViaQuicksort","sortViaBubblesort","sortViaInsertionsort","sortViaSelectionsort","stopCurrentAlgo","App","ele","shifterfunction","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4d7afeb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class LoadingTestComponent extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"loadingText\">\r\n          <ul id=\"loadingUL\">\r\n            <span>L</span>\r\n            <span>O</span>\r\n            <span>A</span>\r\n            <span>D</span>\r\n            <span>I</span>\r\n            <span>N</span>\r\n            <span>G</span>\r\n            <span>.</span>\r\n            <span>.</span>\r\n            <span>.</span>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingTestComponent;\r\n","// Firstly we receive the grid itself,strtnode and endnode as parameters to dijkstra method\r\nexport function Dijkstra(agrid, startnode, endnode) {\r\n  //edge case remains\r\n\r\n  startnode.distance = 0;\r\n  let visitedOrderedNodes = [];\r\n  let unvisitedNodes = [];\r\n  unvisitedNodes = getAllNodes(agrid);\r\n  while (unvisitedNodes.length) {\r\n    SortNodes(unvisitedNodes);\r\n    let closestNode = [];\r\n    closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) {\r\n      continue;\r\n    }\r\n    if (closestNode.distance === Infinity) {\r\n      return visitedOrderedNodes;\r\n    }\r\n    closestNode.isVisited = true;\r\n    visitedOrderedNodes.push(closestNode);\r\n    if (closestNode === endnode) {\r\n      return visitedOrderedNodes;\r\n    }\r\n    UpdateUnvisitedNeighbours(closestNode, agrid);\r\n  }\r\n  //animate\r\n  return;\r\n}\r\n//accepts (nested list) i.e. list of lists of lists\r\n//returns a linear list of lists\r\nfunction getAllNodes(grid) {\r\n  let longList = [];\r\n  for (let row of grid) {\r\n    for (let cell of row) {\r\n      longList.push(cell);\r\n    }\r\n  }\r\n  return longList;\r\n}\r\n//Sorts a linear list by their 'distance' property\r\n//accepts linear list\r\n//returns sorted list\r\nfunction SortNodes(unvisitedNodes) {\r\n  //sort method requires comparison function to evaluate any two values according to their ASCII/UTF code\r\n  //based on the sign and magnitude of value it puts the value at appropriate location\r\n  //sort functiuon does not return a new list/array but sorts elements side in place\r\n  unvisitedNodes.sort((one, other) => one.distance - other.distance);\r\n}\r\n\r\n//updates the distance of nearest unvisited neighbours to +1 unit than current/closest node's distance\r\n//Also assigns currentnode as the previous node to neighbours to backtrack from any node to start node\r\nfunction UpdateUnvisitedNeighbours(node, grid) {\r\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let neighbour of unvisitedNeighbours) {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.previousNode = node;\r\n  }\r\n}\r\n\r\n//returns a list of neighbours to current node in the grid\r\n//accepts current node and grid itself to calculate neighbours in 4 directions\r\n//returns atmost 4 neighbors which are unvisited by checking 'isVisited' property\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  if (node.row > 0) neighbours.push(grid[node.row - 1][node.column]);\r\n  if (node.row < grid.length - 1)\r\n    neighbours.push(grid[node.row + 1][node.column]);\r\n  if (node.column > 0) neighbours.push(grid[node.row][node.column - 1]);\r\n  if (node.column < grid[0].length - 1)\r\n    neighbours.push(grid[node.row][node.column + 1]);\r\n  return neighbours.filter((neighbours) => !neighbours.isVisited);\r\n}\r\nexport function getShortestPath(endnode) {\r\n  let shortpath = [];\r\n  let current_node = endnode;\r\n  while (current_node != null) {\r\n    shortpath.unshift(current_node);\r\n    current_node = current_node.previousNode;\r\n  }\r\n  return shortpath;\r\n}\r\nexport default Dijkstra;\r\n","export function Astar(grid, startnode, endnode) {\r\n  let visitedList = [];\r\n\r\n  let openlist = [];\r\n  openlist.push(startnode);\r\n  let closedlist = [];\r\n  while (openlist.length > 0) {\r\n    let currentNode = lowestFcostNode(openlist);\r\n    visitedList.push(currentNode);\r\n    //openlist.spl;\r\n    openlist.splice(openlist.indexOf(currentNode), 1);\r\n    closedlist.push(currentNode);\r\n\r\n    if (currentNode === endnode) {\r\n      return visitedList;\r\n    }\r\n    let neighbourlist = getNeighboursOfCurrentNode(currentNode, grid);\r\n    for (let neighbour of neighbourlist) {\r\n      //visitedList.push(neighbour);\r\n      if (\r\n        neighbour.isWall ||\r\n        (closedlist.indexOf(neighbour) === -1 ? false : true)\r\n      ) {\r\n        continue;\r\n      }\r\n      let newDistance = currentNode.gCost + getDistance(currentNode, neighbour);\r\n      if (\r\n        newDistance < neighbour.gCost ||\r\n        !(openlist.indexOf(neighbour) === -1 ? false : true)\r\n      ) {\r\n        //newpath to neighbour is shorter\r\n        neighbour.gCost = newDistance;\r\n        neighbour.hCost = getDistance(neighbour, endnode);\r\n        neighbour.fCost = neighbour.gCost + neighbour.hCost;\r\n        neighbour.previousNode = currentNode;\r\n        if (!openlist.indexOf(neighbour) === -1 ? false : true) {\r\n          openlist.push(neighbour);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return visitedList;\r\n}\r\nexport function tracePath(endnode) {\r\n  let short_path = [];\r\n  let currentnode = endnode;\r\n  while (currentnode != null) {\r\n    short_path.unshift(currentnode);\r\n    currentnode = currentnode.previousNode;\r\n  }\r\n  return short_path;\r\n}\r\nfunction getDistance(nodeA, nodeB) {\r\n  let distanceX = Math.abs(nodeA.row - nodeB.row);\r\n  let distanceY = Math.abs(nodeA.column - nodeB.column);\r\n  return distanceX + distanceY;\r\n}\r\n\r\nfunction getNeighboursOfCurrentNode(node, grid) {\r\n  let neighbours = [];\r\n  if (node.row > 0) {\r\n    neighbours.push(grid[node.row - 1][node.column]);\r\n  }\r\n  if (node.row < grid.length - 1) {\r\n    neighbours.push(grid[node.row + 1][node.column]);\r\n  }\r\n  if (node.column > 0) {\r\n    neighbours.push(grid[node.row][node.column - 1]);\r\n  }\r\n  if (node.column < grid[0].length - 1) {\r\n    neighbours.push(grid[node.row][node.column + 1]);\r\n  }\r\n  return neighbours;\r\n}\r\n\r\nfunction lowestFcostNode(openlist) {\r\n  let lowest = openlist[0];\r\n  for (let i = 1; i < openlist.length; i++) {\r\n    if (\r\n      openlist[i].fCost < lowest.fCost ||\r\n      (openlist[i].fCost === lowest.fCost && openlist[i].hCost < lowest.hCost)\r\n    ) {\r\n      lowest = openlist[i];\r\n    }\r\n  }\r\n  return lowest;\r\n}\r\n\r\nexport default Astar;\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./Node.css\";\r\n//The individual Grid element is actually this Component\r\nclass Node extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { props };\r\n  }\r\n\r\n  render() {\r\n    //extraClassName as the name implies is the extra class which is assigned to a Node Component (to be specific the '<div>' html tag)\r\n    //this helps to distinguish the reghular node from startnode and finnish node and wall\r\n    let extraClassName = this.props.isStart\r\n      ? \"node-start\"\r\n      : this.props.isEnd\r\n      ? \"node-end\"\r\n      : this.props.isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n    return (\r\n      //node component is actually a <div> tag with an id and classes\r\n      <div\r\n        id={`r${this.props.row}c${this.props.column}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() =>\r\n          this.props.onMouseDown1(this.props.row, this.props.column)\r\n        }\r\n        onMouseEnter={() =>\r\n          this.props.onMouseEnter1(this.props.row, this.props.column)\r\n        }\r\n        onMouseUp={() =>\r\n          this.props.onMouseUp1(this.props.row, this.props.column)\r\n        }\r\n        onMouseLeave={() =>\r\n          this.props.onMouseLeave1(this.props.row, this.props.column)\r\n        }\r\n        //github.com/react-dnd/react-dnd/issues/900\r\n        //solves drag issue\r\n        onDragStart={(e) => e.preventDefault()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport { PureComponent } from \"react\";\r\nimport Node from \"./Node/Node\";\r\n//The Grid Component is Responsible for rendering the grid\r\n//Those 1000 cells are actually individual components being created by this component\r\nclass Grid extends PureComponent {\r\n  //First we create a nested list with a structure of cells inside rows in side list\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    let list = this.props.grid1;\r\n    //Secondly we use the 'list' to create 'list2' that contains jsx components as elements\r\n    //we use the 'map' function to create 'list2'\r\n    //map funcrtion returns a new element/component by receiving an element and processing it.\r\n    //Here we create *Node* component for every element in list\r\n    let list2 = list.map((row) =>\r\n      row.map((cell) => (\r\n        //Node component has following properties\r\n        <Node\r\n          key={`${cell.row}${cell.column}`}\r\n          row={cell.row}\r\n          column={cell.column}\r\n          isStart={\r\n            cell.row === this.props.snr && cell.column === this.props.snc\r\n          }\r\n          isEnd={cell.row === this.props.enr && cell.column === this.props.enc}\r\n          isWall={cell.isWall}\r\n          onMouseDown1={this.props.onMouseDown}\r\n          onMouseEnter1={this.props.onMouseEnter}\r\n          onMouseUp1={this.props.onMouseUp}\r\n          onMouseLeave1={this.props.onMouseLeave}\r\n        ></Node>\r\n      ))\r\n    );\r\n    //Third, Finally we return a list of *Node* components\r\n    return (\r\n      <div\r\n        id=\"upper-board-layer\"\r\n        onMouseLeave={() => {\r\n          this.props.onMouseUp(0, 0);\r\n        }}\r\n      >\r\n        <div className=\"board\">{list2}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n\r\nfunction SelectScreen() {\r\n  return (\r\n    <div id=\"selectscreen\">\r\n      <div id=\"pathfinding-sec\" onClick={pathFindingOpener}>\r\n        PATHFINDING VISUALIZATION\r\n      </div>\r\n      <div id=\"sorting-sec\" onClick={sortingOpener}>\r\n        SORTING VISUALIZATION\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n//Following functions are responsible for switching of different Components\r\n\r\nfunction pathFindingOpener() {\r\n  document.getElementById(\"pathfinding-sec\").className = \"SelectScreen_to_comp\";\r\n  document.getElementById(\"sorting-sec\").textContent = \"\";\r\n  setTimeout(() => {\r\n    pathFindingOpenerFunction();\r\n  }, 1000);\r\n}\r\nfunction pathFindingOpenerFunction() {\r\n  document.getElementById(\"selectscreen\").style.display = \"none\";\r\n  document.getElementById(\"sorting-visualizer\").style.display = \"none\";\r\n  document.getElementById(\"pathfinding-visualizer\").style.display = \"flex\";\r\n}\r\n\r\nfunction sortingOpener() {\r\n  document.getElementById(\"sorting-sec\").className = \"SelectScreen_to_comp\";\r\n  document.getElementById(\"pathfinding-sec\").textContent = \"\";\r\n  setTimeout(() => {\r\n    sortingOpenerFunction();\r\n  }, 1000);\r\n}\r\nfunction sortingOpenerFunction() {\r\n  document.getElementById(\"selectscreen\").style.display = \"none\";\r\n  document.getElementById(\"sorting-visualizer\").style.display = \"flex\";\r\n  document.getElementById(\"pathfinding-visualizer\").style.display = \"none\";\r\n}\r\n\r\n//Following function called by Pathfinding and sorting Components\r\nexport function sort_to_path() {\r\n  document.getElementById(\"sorting-visualizer\").className = \"componentCloser\";\r\n  setTimeout(() => {\r\n    document.getElementById(\"sorting-visualizer\").style.display = \"none\";\r\n    document.getElementById(\"sorting-visualizer\").className = \"componentOpener\";\r\n    document.getElementById(\"pathfinding-visualizer\").style.display = \"flex\";\r\n    document.getElementById(\"pathfinding-visualizer\").className =\r\n      \"componentOpener\";\r\n  }, 1000);\r\n}\r\nexport function path_to_sort() {\r\n  document.getElementById(\"pathfinding-visualizer\").className =\r\n    \"componentCloser\";\r\n  setTimeout(() => {\r\n    document.getElementById(\"pathfinding-visualizer\").style.display = \"none\";\r\n    document.getElementById(\"pathfinding-visualizer\").className =\r\n      \"componentOpener\";\r\n    document.getElementById(\"sorting-visualizer\").style.display = \"flex\";\r\n    document.getElementById(\"sorting-visualizer\").className = \"componentOpener\";\r\n  }, 1000);\r\n}\r\nexport default SelectScreen;\r\n","import React, { Component } from \"react\";\r\nimport { Dijkstra, getShortestPath } from \"../algorithms/Dijkstra\";\r\nimport { Astar, tracePath } from \"../algorithms/Astar\";\r\nimport Grid from \"./Grid\";\r\nimport * as Selection from \"../SelectScreen\";\r\n\r\nlet START_NODE_ROW = 9;\r\nlet START_NODE_COL = 15;\r\nlet END_NODE_ROW = 9;\r\nlet END_NODE_COL = 59;\r\nlet mousepressed = false;\r\nlet lastKnownPosition = [];\r\nclass PathfindingVisualizer extends Component {\r\n  //First the constructor is created with state\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\r\n    this.handleMouseUp = this.handleMouseUp.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.componentDidMount = this.componentDidMount.bind(this);\r\n    this.enableHalfHeader = this.enableHalfHeader.bind(this);\r\n    this.enableFullHeader = this.enableFullHeader.bind(this);\r\n    this.generateRandomWalls = this.generateRandomWalls.bind(this);\r\n    this.incSpeed = this.incSpeed.bind(this);\r\n    this.decSpeed = this.decSpeed.bind(this);\r\n    this.state = {\r\n      //the state holds the Grid information\r\n      //which is row no., column no. along with other properties\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      draggingStart: false,\r\n      draggingEnd: false,\r\n      speed: 5,\r\n      isDoneVisualizing: false,\r\n    };\r\n  }\r\n  handleMouseDown(row, col) {\r\n    lastKnownPosition = [row, col];\r\n    if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n      this.setState({ draggingStart: true });\r\n    } else if (row === END_NODE_ROW && col === END_NODE_COL) {\r\n      this.setState({ draggingEnd: true });\r\n    } else {\r\n      mousepressed = true;\r\n      if (document.getElementById(`r${row}c${col}`).className === \"node \") {\r\n        document.getElementById(`r${row}c${col}`).className = \"node node-wall\";\r\n      } else if (\r\n        document.getElementById(`r${row}c${col}`).className === \"node node-wall\"\r\n      ) {\r\n        document.getElementById(`r${row}c${col}`).className = \"node \";\r\n      }\r\n    }\r\n  }\r\n  handleMouseLeave(row, col) {\r\n    if (this.state.draggingStart) {\r\n      if (row === END_NODE_ROW && col === END_NODE_COL) {\r\n        return;\r\n      }\r\n    }\r\n    if (this.state.draggingEnd) {\r\n      if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n        return;\r\n      }\r\n    }\r\n    lastKnownPosition = [row, col];\r\n  }\r\n  handleMouseLeaveAction() {\r\n    if (this.state.draggingStart) {\r\n      document.getElementById(\r\n        `r${lastKnownPosition[0]}c${lastKnownPosition[1]}`\r\n      ).className = \"node \";\r\n    }\r\n    if (this.state.draggingEnd) {\r\n      document.getElementById(\r\n        `r${lastKnownPosition[0]}c${lastKnownPosition[1]}`\r\n      ).className = \"node \";\r\n    }\r\n  }\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.draggingStart) {\r\n      if (row === END_NODE_ROW && col === END_NODE_COL) {\r\n        return;\r\n      }\r\n      this.handleMouseLeaveAction();\r\n      START_NODE_ROW = row;\r\n      START_NODE_COL = col;\r\n      document.getElementById(`r${row}c${col}`).className = \"node node-start\";\r\n    }\r\n    if (this.state.draggingEnd) {\r\n      if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n        return;\r\n      }\r\n      this.handleMouseLeaveAction();\r\n      END_NODE_ROW = row;\r\n      END_NODE_COL = col;\r\n      document.getElementById(`r${row}c${col}`).className = \"node node-end\";\r\n    }\r\n    if (!mousepressed) {\r\n      return;\r\n    }\r\n    if (document.getElementById(`r${row}c${col}`).className === \"node \") {\r\n      document.getElementById(`r${row}c${col}`).className = \"node node-wall\";\r\n    } else if (\r\n      document.getElementById(`r${row}c${col}`).className === \"node node-wall\"\r\n    ) {\r\n      document.getElementById(`r${row}c${col}`).className = \"node \";\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    mousepressed = false;\r\n    const wallGrid = explicitWallGrid(this.state.grid);\r\n    this.setState({\r\n      grid: wallGrid,\r\n      mouseIsPressed: false,\r\n      draggingStart: false,\r\n      draggingEnd: false,\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    // Third, After the Render method is executed this method is automatically called\r\n    const agrid = getInitialGrid();\r\n    this.setState({ grid: agrid });\r\n  }\r\n\r\n  disableHeader() {\r\n    document.getElementById(\"header\").className = \"disabled-content\";\r\n    document.getElementById(\"hbtn1\").disabled = true;\r\n    document.getElementById(\"hbtn1\").style.color = \"gray\";\r\n    document.getElementById(\"hbtn2\").disabled = true;\r\n    document.getElementById(\"hbtn2\").style.color = \"gray\";\r\n    document.getElementById(\"hbtn3\").disabled = true;\r\n    document.getElementById(\"hbtn3\").style.color = \"gray\";\r\n    document.getElementById(\"hbtn4\").disabled = true;\r\n    document.getElementById(\"upper-board-layer\").style.pointerEvents = \"none\";\r\n  }\r\n  enableHalfHeader(pLen) {\r\n    document.getElementById(\"header\").className = \"active-content\";\r\n    document.getElementById(\"hbtn4\").disabled = false;\r\n    if (pLen > 1) {\r\n      document.getElementById(\"path-count\").innerHTML = `SHORTEST-PATH - ${\r\n        pLen - 1\r\n      } UNITS`;\r\n    }\r\n    this.setState({ isDoneVisualizing: true });\r\n  }\r\n  enableFullHeader() {\r\n    document.getElementById(\"hbtn1\").disabled = false;\r\n    document.getElementById(\"hbtn1\").style.color = \"white\";\r\n    document.getElementById(\"hbtn2\").disabled = false;\r\n    document.getElementById(\"hbtn2\").style.color = \"white\";\r\n    document.getElementById(\"hbtn3\").disabled = false;\r\n    document.getElementById(\"hbtn3\").style.color = \"white\";\r\n    document.getElementById(\r\n      \"path-count\"\r\n    ).innerHTML = `SHORTEST-PATH - INFINITE UNITS`;\r\n    document.getElementById(\"upper-board-layer\").style.pointerEvents = \"all\";\r\n    this.setState({ isDoneVisualizing: false });\r\n  }\r\n  visualizeDijkstra() {\r\n    let delay = this.state.speed;\r\n    this.disableHeader();\r\n    //Sixth, When button is pressed method is called\r\n    //we get the list in return which has the order of visiting of nodes\r\n    //IMPORTANT this is linear array/list\r\n    let startnode = this.state.grid[START_NODE_ROW][START_NODE_COL];\r\n    let endingnode = this.state.grid[END_NODE_ROW][END_NODE_COL];\r\n    let visitedNodesInOrder = Dijkstra(this.state.grid, startnode, endingnode);\r\n    // console.log(`length of Dijkstra nodes- ${visitedNodesInOrder.length}`);\r\n\r\n    let shortestPath = getShortestPath(endingnode);\r\n\r\n    //we use this order list to animate the dijkstra\r\n    //i.e. for evry node we traverse in the order as dijkstra algorithm did\r\n    //we change the color of node\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          for (\r\n            let j = 0;\r\n            j < shortestPath.length && shortestPath.length > 1;\r\n            j++\r\n          ) {\r\n            let current = shortestPath[j];\r\n            let terminalStartNode =\r\n              document.getElementById(`r${current.row}c${current.column}`)\r\n                .className === \"node node-start node-visited\";\r\n            let terminalEndNode =\r\n              document.getElementById(`r${current.row}c${current.column}`)\r\n                .className === \"node node-end node-visited\";\r\n            setTimeout(() => {\r\n              if (terminalStartNode) {\r\n                document.getElementById(\r\n                  `r${current.row}c${current.column}`\r\n                ).className = \"node node-start node-shortestPath\";\r\n              } else if (terminalEndNode) {\r\n                document.getElementById(\r\n                  `r${current.row}c${current.column}`\r\n                ).className = \"node node-end node-shortestPath\";\r\n              } else\r\n                document.getElementById(\r\n                  `r${current.row}c${current.column}`\r\n                ).className = \"node node-shortestPath\";\r\n            }, 40 * j);\r\n          }\r\n        }, delay * i);\r\n        setTimeout(() => {\r\n          this.enableHalfHeader(shortestPath.length);\r\n        }, delay * visitedNodesInOrder.length + 40 * shortestPath.length);\r\n        return;\r\n      }\r\n      let current = visitedNodesInOrder[i];\r\n      let terminalStartNode =\r\n        document.getElementById(`r${current.row}c${current.column}`)\r\n          .className === \"node node-start\";\r\n      let terminalEndNode =\r\n        document.getElementById(`r${current.row}c${current.column}`)\r\n          .className === \"node node-end\";\r\n      setTimeout(() => {\r\n        if (terminalStartNode) {\r\n          document.getElementById(\r\n            `r${current.row}c${current.column}`\r\n          ).className = \"node node-start node-visited\";\r\n        } else if (terminalEndNode) {\r\n          document.getElementById(\r\n            `r${current.row}c${current.column}`\r\n          ).className = \"node node-end node-visited\";\r\n        } else\r\n          document.getElementById(\r\n            `r${current.row}c${current.column}`\r\n          ).className = \"node node-visited\";\r\n      }, delay * i);\r\n    }\r\n  }\r\n  visualizeAstar() {\r\n    let delay = this.state.speed;\r\n    this.disableHeader();\r\n    //Sixth, When button is pressed method is called\r\n    //we get the list in return which has the order of visiting of nodes\r\n    //IMPORTANT this is linear array/list\r\n    let startnode = this.state.grid[START_NODE_ROW][START_NODE_COL];\r\n    let endnode = this.state.grid[END_NODE_ROW][END_NODE_COL];\r\n    let visitedNodesOrder = Astar(this.state.grid, startnode, endnode);\r\n    let shortest_Path = tracePath(endnode);\r\n\r\n    for (let i = 0; i <= visitedNodesOrder.length; i++) {\r\n      if (i === visitedNodesOrder.length) {\r\n        setTimeout(() => {\r\n          for (\r\n            let j = 0;\r\n            j < shortest_Path.length && shortest_Path.length > 1;\r\n            j++\r\n          ) {\r\n            let current = shortest_Path[j];\r\n            let terminalStartNode =\r\n              document.getElementById(`r${current.row}c${current.column}`)\r\n                .className === \"node node-start node-visited\";\r\n            let terminalEndNode =\r\n              document.getElementById(`r${current.row}c${current.column}`)\r\n                .className === \"node node-end node-visited\";\r\n            setTimeout(() => {\r\n              if (terminalStartNode) {\r\n                document.getElementById(\r\n                  `r${current.row}c${current.column}`\r\n                ).className = \"node node-start node-shortestPath\";\r\n              } else if (terminalEndNode) {\r\n                document.getElementById(\r\n                  `r${current.row}c${current.column}`\r\n                ).className = \"node node-end node-shortestPath \";\r\n              } else\r\n                document.getElementById(\r\n                  `r${current.row}c${current.column}`\r\n                ).className = \"node node-shortestPath\";\r\n            }, 40 * j);\r\n          }\r\n        }, delay * i);\r\n        setTimeout(() => {\r\n          this.enableHalfHeader(shortest_Path.length);\r\n        }, delay * visitedNodesOrder.length + 40 * shortest_Path.length);\r\n        return;\r\n      }\r\n      let current = visitedNodesOrder[i];\r\n      let terminalStartNode =\r\n        document.getElementById(`r${current.row}c${current.column}`)\r\n          .className === \"node node-start\";\r\n      let terminalEndNode =\r\n        document.getElementById(`r${current.row}c${current.column}`)\r\n          .className === \"node node-end\";\r\n      setTimeout(() => {\r\n        if (terminalStartNode) {\r\n          document.getElementById(\r\n            `r${current.row}c${current.column}`\r\n          ).className = \"node node-start node-visited\";\r\n        } else if (terminalEndNode) {\r\n          document.getElementById(\r\n            `r${current.row}c${current.column}`\r\n          ).className = \"node node-end node-visited\";\r\n        } else\r\n          document.getElementById(\r\n            `r${current.row}c${current.column}`\r\n          ).className = \"node node-visited\";\r\n      }, delay * i);\r\n    }\r\n  }\r\n  resetFullBoard() {\r\n    this.componentDidMount();\r\n    for (let i = 0; i < 30; i++) {\r\n      for (let j = 0; j < 75; j++) {\r\n        if (i === START_NODE_ROW && j === START_NODE_COL) {\r\n          document.getElementById(`r${i}c${j}`).className = \"node node-start\";\r\n          continue;\r\n        }\r\n        if (i === END_NODE_ROW && j === END_NODE_COL) {\r\n          document.getElementById(`r${i}c${j}`).className = \"node node-end\";\r\n          continue;\r\n        }\r\n        document.getElementById(`r${i}c${j}`).className = \"node \";\r\n      }\r\n    }\r\n    this.enableFullHeader();\r\n  }\r\n  resetAlgorithm() {\r\n    for (let i = 0; i < 30; i++) {\r\n      for (let j = 0; j < 75; j++) {\r\n        let nonValidNode =\r\n          document.getElementById(`r${i}c${j}`).className ===\r\n            \"node node-wall\" ||\r\n          document.getElementById(`r${i}c${j}`).className ===\r\n            \"node node-start\" ||\r\n          document.getElementById(`r${i}c${j}`).className === \"node node-end\";\r\n        if (nonValidNode) {\r\n          continue;\r\n        }\r\n        document.getElementById(`r${i}c${j}`).className = \"node \";\r\n      }\r\n    }\r\n  }\r\n  getRandomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  incSpeed() {\r\n    let boxSpeed = document.getElementById(\"box\");\r\n    if (boxSpeed.innerHTML === \"LOW\") {\r\n      this.setState({ speed: 20 }, () => (boxSpeed.innerHTML = \"MEDIUM\"));\r\n    }\r\n    if (boxSpeed.innerHTML === \"MEDIUM\") {\r\n      this.setState({ speed: 5 }, () => (boxSpeed.innerHTML = \"HIGH\"));\r\n    }\r\n    if (boxSpeed.innerHTML === \"HIGH\") {\r\n      this.setState({ speed: 40 }, () => (boxSpeed.innerHTML = \"LOW\"));\r\n    }\r\n  }\r\n  decSpeed() {\r\n    let boxSpeed = document.getElementById(\"box\");\r\n    if (boxSpeed.innerHTML === \"LOW\") {\r\n      this.setState({ speed: 5 }, () => (boxSpeed.innerHTML = \"HIGH\"));\r\n    }\r\n    if (boxSpeed.innerHTML === \"HIGH\") {\r\n      this.setState({ speed: 20 }, () => (boxSpeed.innerHTML = \"MEDIUM\"));\r\n    }\r\n    if (boxSpeed.innerHTML === \"MEDIUM\") {\r\n      this.setState({ speed: 40 }, () => (boxSpeed.innerHTML = \"LOW\"));\r\n    }\r\n  }\r\n  generateRandomWalls() {\r\n    this.resetFullBoard();\r\n    for (let i = 0; i < 30; i++) {\r\n      for (let j = 0; j < 75; j++) {\r\n        if (i === START_NODE_ROW && j === START_NODE_COL) {\r\n          continue;\r\n        }\r\n        if (i === END_NODE_ROW && j === END_NODE_COL) {\r\n          continue;\r\n        }\r\n        let wallProbability = Math.random();\r\n        if (wallProbability > 0.7) {\r\n          document.getElementById(`r${i}c${j}`).className = \"node node-wall\";\r\n        }\r\n      }\r\n    }\r\n    this.handleMouseUp(0, 0);\r\n  }\r\n  render() {\r\n    //Second Render Method is called which draws the  button and entire grid containing 1000 cells\r\n    return (\r\n      <div id=\"pathfinding-visualizer\" className=\"componentOpener\">\r\n        <div id=\"header\" className=\"active-content\">\r\n          <button id=\"hbtn1\" onClick={() => this.visualizeDijkstra()}>\r\n            DIJKSTRA's ALGORITHM\r\n          </button>\r\n          <button id=\"hbtn2\" onClick={() => this.visualizeAstar()}>\r\n            A STAR (A*) ALGORITHM\r\n          </button>\r\n          <button id=\"hbtn3\" onClick={() => this.generateRandomWalls()}>\r\n            GENERATE RANDOM WALLS\r\n          </button>\r\n          <button id=\"hbtn4\" onClick={() => this.resetFullBoard()}>\r\n            RESET GRID\r\n          </button>\r\n          <div id=\"pf-speed-container\">\r\n            SPEED:\r\n            <div id=\"prev-container\" onClick={() => this.decSpeed()}>\r\n              <span id=\"prev\"></span>\r\n            </div>\r\n            <span id=\"box\">HIGH</span>\r\n            <div id=\"next-container\" onClick={() => this.incSpeed()}>\r\n              <span id=\"next\"></span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Grid\r\n          snr={START_NODE_ROW}\r\n          snc={START_NODE_COL}\r\n          enr={END_NODE_ROW}\r\n          enc={END_NODE_COL}\r\n          grid1={this.state.grid}\r\n          onMouseDown={this.handleMouseDown}\r\n          onMouseEnter={this.handleMouseEnter}\r\n          onMouseUp={this.handleMouseUp}\r\n          onMouseLeave={this.handleMouseLeave}\r\n        ></Grid>\r\n        <div id=\"path-count\">SHORTEST PATH - INFINITE UNITS</div>\r\n        <div id=\"title-base\">\r\n          <span>PATHFINDING VISUALIZER</span>\r\n          <hr></hr>\r\n          <button id=\"path-to-sort-switcher\" onClick={switchToSorter}>\r\n            Switch to Sorting Visualizer\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction switchToSorter() {\r\n  Selection.path_to_sort();\r\n}\r\n//Fourth, getInitialgrid method returns the crucial information that is used in dijkstra algorithm\r\n//i.e. the structure of the node\r\n\r\nfunction getInitialGrid() {\r\n  let list = [];\r\n  for (let i = 0; i < 30; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < 75; j++) {\r\n      row.push({\r\n        row: i,\r\n        column: j,\r\n        isStart: i === START_NODE_ROW && j === START_NODE_COL,\r\n        isFinish: i === END_NODE_ROW && j === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        gCost: 0,\r\n        hCost: 0,\r\n        fCost: 0,\r\n      });\r\n    }\r\n    list.push(row);\r\n  }\r\n  return list;\r\n}\r\nfunction explicitWallGrid(thisGrid) {\r\n  const temporaryGrid = thisGrid.slice();\r\n  for (let i = 0; i < 30; i++) {\r\n    for (let j = 0; j < 75; j++) {\r\n      if (i === START_NODE_ROW && j === START_NODE_COL) {\r\n        continue;\r\n      }\r\n      if (i === END_NODE_ROW && j === END_NODE_COL) {\r\n        continue;\r\n      }\r\n      let nodeClass = document.getElementById(`r${i}c${j}`).className;\r\n      const node = thisGrid[i][j];\r\n      if (nodeClass === \"node node-wall\") {\r\n        const newnode = { ...node, isWall: true };\r\n        temporaryGrid[i][j] = newnode;\r\n      }\r\n      if (nodeClass === \"node \") {\r\n        const newnode = { ...node, isWall: false };\r\n        temporaryGrid[i][j] = newnode;\r\n      }\r\n    }\r\n  }\r\n  return temporaryGrid;\r\n}\r\n\r\nexport default PathfindingVisualizer;\r\n","//MERGE SORT ALGORITHM STARTS\r\n//Initial call executes this function\r\n//Rather than returning the sorted array, it return the steps it performed\r\n//to get sorted array.\r\nexport function mergesort(array) {\r\n  const steps = [];\r\n  if (array.length <= 1) return array;\r\n  const auxArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxArray, steps);\r\n  return steps;\r\n}\r\n//mergesort function calls this function to start recursion\r\n// this function divides the array into two halves by middle index\r\nfunction mergeSortHelper(mainArray, start, end, auxArray, steps) {\r\n  if (start === end) return;\r\n  const mid = Math.floor((start + end) / 2);\r\n  mergeSortHelper(auxArray, start, mid, mainArray, steps);\r\n  mergeSortHelper(auxArray, mid + 1, end, mainArray, steps);\r\n  merge(mainArray, auxArray, start, mid, end, steps);\r\n}\r\n//this function combines the the two sorted arrays\r\nfunction merge(mainArray, auxArray, start, mid, end, steps) {\r\n  let m = start;\r\n  let i = start;\r\n  let j = mid + 1;\r\n  while (i <= mid && j <= end) {\r\n    steps.push([i, j]);\r\n    steps.push([i, j]);\r\n    if (auxArray[i] <= auxArray[j]) {\r\n      steps.push([m, auxArray[i]]);\r\n      mainArray[m++] = auxArray[i++];\r\n    } else {\r\n      steps.push([m, auxArray[j]]);\r\n      mainArray[m++] = auxArray[j++];\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    steps.push([i, i]);\r\n    steps.push([i, i]);\r\n    steps.push([m, auxArray[i]]);\r\n    mainArray[m++] = auxArray[i++];\r\n  }\r\n  while (j <= end) {\r\n    steps.push([j, j]);\r\n    steps.push([j, j]);\r\n    steps.push([m, auxArray[j]]);\r\n    mainArray[m++] = auxArray[j++];\r\n  }\r\n}\r\n//MERGE SORT ALGORITHM ENDS\r\n\r\n// QUICKSORT ALGORITHM STARTS\r\n//This version of Quicksort chooses last element of array as pivot\r\nexport function quicksort(array) {\r\n  const sortSteps = [];\r\n  quickSortHelper(array, 0, array.length - 1, sortSteps);\r\n  return [sortSteps, array];\r\n}\r\nfunction quickSortHelper(mainArray, start, end, sortSteps) {\r\n  if (start < end) {\r\n    let pivot = partition(mainArray, start, end, sortSteps);\r\n    quickSortHelper(mainArray, start, pivot - 1, sortSteps);\r\n    quickSortHelper(mainArray, pivot + 1, end, sortSteps);\r\n  }\r\n}\r\nfunction partition(mainArray, start, end, sortSteps) {\r\n  let pivotValue = mainArray[end];\r\n  let i = start - 1;\r\n  // let temp = 0;\r\n  for (let j = start; j <= end - 1; j++) {\r\n    if (mainArray[j] <= pivotValue) {\r\n      sortSteps.push([j, end]);\r\n      sortSteps.push([j, end]);\r\n      i++;\r\n      sortSteps.push([i, j]);\r\n      const temp = mainArray[i];\r\n      mainArray[i] = mainArray[j];\r\n      mainArray[j] = temp;\r\n    }\r\n    // else {\r\n    //   sortSteps.push([j, end]);\r\n    //   sortSteps.push([j, end]);\r\n    //   sortSteps.push([j, j]);\r\n    // }\r\n  }\r\n  i++;\r\n  sortSteps.push([i, i]);\r\n  sortSteps.push([i, i]);\r\n  sortSteps.push([i, end]);\r\n\r\n  const temp = mainArray[i];\r\n  mainArray[i] = mainArray[end];\r\n  mainArray[end] = temp;\r\n  return i;\r\n}\r\n// QUICKSORT ALGORITHM ENDS\r\n\r\n// BUBBLESORT ALGORITHM STARTS\r\nexport function bubblesort(array) {\r\n  let steps = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      steps.push([j, j + 1]);\r\n      steps.push([j, j + 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        steps.push([j, j + 1]);\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      } else {\r\n        steps.push([j, j]);\r\n      }\r\n    }\r\n  }\r\n  return [array, steps];\r\n}\r\n// BUBBLESORT ALGORITHM ENDS\r\n\r\n// INSERTIONSORT ALGORITHM STARTS\r\nexport function insertionsort(array) {\r\n  const steps = [];\r\n  for (let i = 1; i < array.length; i++) {\r\n    //iteration\r\n    let marker = i;\r\n    let temp = array[i];\r\n    while (array[marker - 1] > temp && marker !== 0) {\r\n      //shift values to right i.e. overwrite right value with left\r\n      steps.push([marker, marker - 1]);\r\n      steps.push([marker, marker - 1]);\r\n      steps.push([marker, array[marker - 1]]);\r\n      array[marker] = array[marker - 1];\r\n      marker--;\r\n    }\r\n    steps.push([marker, i]);\r\n    steps.push([marker, i]);\r\n    steps.push([marker, temp]);\r\n    array[marker] = temp;\r\n    //assign at appropriate location\r\n  }\r\n  return [array, steps];\r\n}\r\n// INSERTIONSORT ALGORITHM ENDS\r\n\r\n// SELECTIONSORT ALGORITHM STARTS\r\nexport function selectionsort(array) {\r\n  const steps = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    const [ind, temp] = minimum(array, i);\r\n    steps.push(...temp);\r\n    steps.push([i, ind]);\r\n    steps.push([i, ind]);\r\n    steps.push([i, ind]);\r\n    let temporaory = array[i];\r\n    array[i] = array[ind];\r\n    array[ind] = temporaory;\r\n  }\r\n  return [array, steps];\r\n}\r\nfunction minimum(anArray, start) {\r\n  let min = anArray[start];\r\n  let minIndex = start;\r\n  let step = [];\r\n  for (let j = start + 1; j < anArray.length; j++) {\r\n    if (min > anArray[j]) {\r\n      step.push([minIndex, j]);\r\n      step.push([minIndex, j]);\r\n      step.push([j, j]);\r\n      min = anArray[j];\r\n      minIndex = j;\r\n    }\r\n  }\r\n  return [minIndex, step];\r\n}\r\n\r\n// SELECTIONSORT ALGORITHM ENDS\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\nimport * as SortingAlgorithms from \"./SortingAlgorithms\";\r\nimport * as Selection from \"../SelectScreen\";\r\n\r\nexport class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getrandomvariable = this.getrandomvariable.bind(this);\r\n    this.arraySizeChange = this.arraySizeChange.bind(this);\r\n    this.animationSpeedChange = this.animationSpeedChange.bind(this);\r\n    this.restoreButtonFunctionality = this.restoreButtonFunctionality.bind(\r\n      this\r\n    );\r\n\r\n    this.state = {\r\n      baseArray: [],\r\n      bars: 150,\r\n      delay: 1,\r\n      status: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.resetBaseArray();\r\n    document.getElementById(\"stop-button\").disabled = true;\r\n  }\r\n  //this function creates arrays\r\n  resetBaseArray() {\r\n    const newarray = [];\r\n    for (let i = 0; i < this.state.bars; i++) {\r\n      newarray.push(this.getrandomvariable(5, 100));\r\n    }\r\n    this.setState({ baseArray: newarray });\r\n  }\r\n  //this gives random variable\r\n  getrandomvariable(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  //calls mergesort\r\n  disablebuttons() {\r\n    document.getElementById(\"head-section\").className = \"disabled\";\r\n    document.getElementById(\"btn1\").disabled = true;\r\n    document.getElementById(\"btn2\").disabled = true;\r\n    document.getElementById(\"btn3\").disabled = true;\r\n    document.getElementById(\"btn4\").disabled = true;\r\n    document.getElementById(\"btn5\").disabled = true;\r\n    document.getElementById(\"btn6\").disabled = true;\r\n    document.getElementById(\"slider\").disabled = true;\r\n    document.getElementById(\"speed-slider\").disabled = true;\r\n    document.getElementById(\"stop-button\").disabled = false;\r\n    document.getElementById(\"stop-button\").style.backgroundColor =\r\n      \"rgb(177, 58, 58)\";\r\n  }\r\n  restoreButtonFunctionality() {\r\n    document.getElementById(\"head-section\").className = \"active\";\r\n    document.getElementById(\"btn1\").disabled = false;\r\n    document.getElementById(\"btn2\").disabled = false;\r\n    document.getElementById(\"btn3\").disabled = false;\r\n    document.getElementById(\"btn4\").disabled = false;\r\n    document.getElementById(\"btn5\").disabled = false;\r\n    document.getElementById(\"btn6\").disabled = false;\r\n    document.getElementById(\"slider\").disabled = false;\r\n    document.getElementById(\"speed-slider\").disabled = false;\r\n    document.getElementById(\"stop-button\").disabled = true;\r\n    document.getElementById(\"stop-button\").backgroundColor = \"gray\";\r\n  }\r\n  stopCurrentAlgo() {\r\n    var id = window.setTimeout(function () {}, 0);\r\n    while (id--) {\r\n      window.clearTimeout(id);\r\n    }\r\n    this.restoreButtonFunctionality();\r\n    this.resetter();\r\n    const elements = document.getElementsByClassName(\"bar\");\r\n    for (let i = 0; i < elements.length; i++) {\r\n      elements[i].style.backgroundColor = \" rgb(36, 182, 255)\";\r\n    }\r\n  }\r\n  sortViaMergesort() {\r\n    this.disablebuttons();\r\n    const delay = this.state.delay;\r\n    const barray = SortingAlgorithms.mergesort(this.state.baseArray);\r\n    for (let i = 0; i < barray.length; i++) {\r\n      const bar = document.getElementsByClassName(\"bar\");\r\n      const colorChange = i % 3 !== 2;\r\n      if (colorChange) {\r\n        const [first, second] = barray[i];\r\n        const firstStyle = bar[first].style;\r\n        const secondStyle = bar[second].style;\r\n        const color = i % 3 === 0 ? \"red\" : \"rgb(36, 182, 255)\";\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = color;\r\n          secondStyle.backgroundColor = color;\r\n        }, i * delay);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [idx, ht] = barray[i];\r\n          const idxStyle = bar[idx].style;\r\n          // idxStyle.backgroundColor = \"purple \";\r\n          idxStyle.height = `${ht * 0.7}vh`;\r\n        }, i * delay);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.restoreButtonFunctionality();\r\n    }, delay * (barray.length - 1));\r\n  }\r\n\r\n  //call quicksort\r\n  sortViaQuicksort() {\r\n    this.disablebuttons();\r\n    const delay = this.state.delay;\r\n    const temp = SortingAlgorithms.quicksort(this.state.baseArray);\r\n    const quicksteps = temp[0];\r\n\r\n    for (let i = 0; i < quicksteps.length; i++) {\r\n      const bar = document.getElementsByClassName(\"bar\");\r\n      const colorChange = i % 3 !== 2;\r\n\r\n      if (colorChange) {\r\n        const [first, second] = quicksteps[i];\r\n        const firstStyle = bar[first].style;\r\n        const secondStyle = bar[second].style;\r\n        const color = i % 3 === 0 ? \"red\" : \"rgb(36, 182, 255)\";\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = color;\r\n          secondStyle.backgroundColor = color;\r\n        }, i * delay);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [ida, idb] = quicksteps[i];\r\n          const idaStyle = bar[ida].style;\r\n          const idbStyle = bar[idb].style;\r\n          let height = idaStyle.height;\r\n          idaStyle.height = idbStyle.height;\r\n          idbStyle.height = height;\r\n        }, i * delay);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.restoreButtonFunctionality();\r\n    }, delay * (quicksteps.length - 1));\r\n  }\r\n  sortViaBubblesort() {\r\n    this.disablebuttons();\r\n    const temp = SortingAlgorithms.bubblesort(this.state.baseArray);\r\n    const delay = this.state.delay;\r\n    const bubblesteps = temp[1];\r\n\r\n    for (let i = 0; i < bubblesteps.length; i++) {\r\n      const bar = document.getElementsByClassName(\"bar\");\r\n      const colorChange = i % 3 !== 2;\r\n\r\n      if (colorChange) {\r\n        const [first, second] = bubblesteps[i];\r\n        const firstStyle = bar[first].style;\r\n        const secondStyle = bar[second].style;\r\n        const color = i % 3 === 0 ? \"red\" : \"rgb(36, 182, 255)\";\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = color;\r\n          secondStyle.backgroundColor = color;\r\n        }, i * delay);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [ida, idb] = bubblesteps[i];\r\n          const idaStyle = bar[ida].style;\r\n          const idbStyle = bar[idb].style;\r\n          let height = idaStyle.height;\r\n          idaStyle.height = idbStyle.height;\r\n          idbStyle.height = height;\r\n        }, i * delay);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.restoreButtonFunctionality();\r\n    }, delay * (bubblesteps.length - 1));\r\n  }\r\n  sortViaInsertionsort() {\r\n    this.disablebuttons();\r\n\r\n    const temp = SortingAlgorithms.insertionsort(this.state.baseArray);\r\n    const delay = this.state.delay;\r\n    const insertionsteps = temp[1];\r\n    for (let i = 0; i < insertionsteps.length; i++) {\r\n      const bar = document.getElementsByClassName(\"bar\");\r\n      const colorChange = i % 3 !== 2;\r\n\r\n      if (colorChange) {\r\n        const [first, second] = insertionsteps[i];\r\n        const firstStyle = bar[first].style;\r\n        const secondStyle = bar[second].style;\r\n        const color = i % 3 === 0 ? \"red\" : \"rgb(36, 182, 255)\";\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = color;\r\n          secondStyle.backgroundColor = color;\r\n        }, i * delay);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [ida, height] = insertionsteps[i];\r\n          const idaStyle = bar[ida].style;\r\n          idaStyle.height = `${height * 0.7}vh`;\r\n        }, i * delay);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.restoreButtonFunctionality();\r\n    }, delay * (insertionsteps.length - 1));\r\n  }\r\n  sortViaSelectionsort() {\r\n    this.disablebuttons();\r\n    // this.setState({ status: 1 }, disableheader);\r\n    const delay = this.state.delay;\r\n    const temp = SortingAlgorithms.selectionsort(this.state.baseArray);\r\n    const selectionsteps = temp[1];\r\n    for (let i = 0; i < selectionsteps.length; i++) {\r\n      const bar = document.getElementsByClassName(\"bar\");\r\n      const colorChange = i % 3 !== 2;\r\n\r\n      if (colorChange) {\r\n        const [first, second] = selectionsteps[i];\r\n        const firstStyle = bar[first].style;\r\n        const secondStyle = bar[second].style;\r\n        const color = i % 3 === 0 ? \"red\" : \"rgb(36, 182, 255)\";\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = color;\r\n          secondStyle.backgroundColor = color;\r\n        }, i * delay);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [ida, idb] = selectionsteps[i];\r\n          const idaStyle = bar[ida].style;\r\n          const idbStyle = bar[idb].style;\r\n          const newHeight = idaStyle.height;\r\n          idaStyle.height = idbStyle.height;\r\n          idbStyle.height = newHeight;\r\n        }, i * delay);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.restoreButtonFunctionality();\r\n    }, delay * (selectionsteps.length - 1));\r\n  }\r\n\r\n  resetter() {\r\n    for (let i = 0; i < 20; i++) {\r\n      setTimeout(() => {\r\n        this.resetBaseArray();\r\n      }, 30 * i);\r\n    }\r\n  }\r\n  arraySizeChange() {\r\n    let newNumberOfBars = document.getElementById(\"slider\").value;\r\n    this.setState({ bars: newNumberOfBars }, this.resetBaseArray);\r\n  }\r\n  animationSpeedChange() {\r\n    let newAnimationSpeed = document.getElementById(\"speed-slider\").value;\r\n    this.setState({ delay: 1000 - newAnimationSpeed + 1 });\r\n  }\r\n  render() {\r\n    const array = this.state.baseArray;\r\n    return (\r\n      <div id=\"sorting-visualizer\" className=\"componentOpener\">\r\n        <div id=\"head-section\" className=\"active\">\r\n          <div id=\"slider-container\">\r\n            Array Size:\r\n            <input\r\n              type=\"range\"\r\n              name=\"\"\r\n              min=\"5\"\r\n              step=\"1\"\r\n              defaultValue=\"150\"\r\n              max=\"300\"\r\n              id=\"slider\"\r\n              onChange={this.arraySizeChange}\r\n            ></input>\r\n          </div>\r\n          <button\r\n            id=\"btn1\"\r\n            className=\"head-section-button\"\r\n            onClick={() => {\r\n              this.resetter();\r\n            }}\r\n          >\r\n            Generate new array\r\n          </button>\r\n          <button\r\n            id=\"btn2\"\r\n            className=\"head-section-button\"\r\n            onClick={() => {\r\n              this.sortViaMergesort();\r\n            }}\r\n          >\r\n            Merge Sort!\r\n          </button>\r\n          <button\r\n            id=\"btn3\"\r\n            className=\"head-section-button\"\r\n            onClick={() => {\r\n              this.sortViaQuicksort();\r\n            }}\r\n          >\r\n            Quick Sort!\r\n          </button>\r\n          <button\r\n            id=\"btn4\"\r\n            className=\"head-section-button\"\r\n            onClick={() => {\r\n              this.sortViaBubblesort();\r\n            }}\r\n          >\r\n            Bubble Sort!\r\n          </button>\r\n          <button\r\n            id=\"btn5\"\r\n            className=\"head-section-button\"\r\n            onClick={() => {\r\n              this.sortViaInsertionsort();\r\n            }}\r\n          >\r\n            Insertion Sort!\r\n          </button>\r\n          <button\r\n            id=\"btn6\"\r\n            className=\"head-section-button\"\r\n            onClick={() => {\r\n              this.sortViaSelectionsort();\r\n            }}\r\n          >\r\n            Selection Sort!\r\n          </button>\r\n          <div id=\"speed-slider-container\">\r\n            Speed:\r\n            <input\r\n              type=\"range\"\r\n              min=\"1\"\r\n              step=\"1\"\r\n              defaultValue=\"1000\"\r\n              max=\"1000\"\r\n              id=\"speed-slider\"\r\n              onChange={this.animationSpeedChange}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={idx}\r\n              id={`${idx}`}\r\n              style={{ height: `${value * 0.7}vh` }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div id=\"stop-div\">\r\n          <button\r\n            id=\"stop-button\"\r\n            onClick={() => {\r\n              this.stopCurrentAlgo();\r\n            }}\r\n          >\r\n            STOP!\r\n          </button>\r\n        </div>\r\n        <div className=\"bottom-base\">\r\n          <span>SORTING VISUALIZER</span>\r\n          <hr></hr>\r\n          <button id=\"switcher\" onClick={switchToPathfinder}>\r\n            Switch to Pathfinding Visualizer\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction switchToPathfinder() {\r\n  Selection.sort_to_path();\r\n}\r\nexport default SortingVisualizer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport LoadingTestComponent from \"./project_source/LoadingTestComponent\";\nimport PathfindingVisualizer from \"./project_source/pathfindingVisualizer/PathfindingVisualizer\";\nimport SelectScreen from \"./project_source/SelectScreen\";\nimport SortingVisualizer from \"./project_source/sortingvisualizer/SortingVisualizer\";\nfunction shifterfunction() {\n  let ele = document.getElementById(\"selectscreen\");\n  document.getElementById(\"loadingText\").style.display = \"none\";\n  ele.style.display = \"flex\";\n}\nfunction App() {\n  setTimeout(() => {\n    shifterfunction();\n  }, 4000);\n\n  return (\n    <div>\n      <LoadingTestComponent />\n      <SelectScreen></SelectScreen>\n      <PathfindingVisualizer></PathfindingVisualizer>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}